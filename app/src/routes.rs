use rocket::{get, http::Status, post, serde::json::Json};

use crate::models;
use models::{GenericResponse, Reservation};


#[get("/")]
pub async fn index() -> Result<Json<GenericResponse>, Status> {
    const MESSAGE: &str = "Hello, world!";

    let response_json = GenericResponse {
        status: Status::Ok.to_string(),
        message: MESSAGE.to_string(),
    };
    // The Serialize trait implementation generated by derive is invoked
    // by Json. It expects a struct that implements Serialize.
    Ok(Json(response_json))
}

#[post("/reservations", data = "<reservation>")]
pub async fn post_reservation(reservation: Json<Reservation>) -> Result<Json<GenericResponse>, Status> {
    println!("Thing: {:?}", reservation);
    let response_json = GenericResponse {
        status: Status::Ok.to_string(),
        message: "Reservation created!".to_string(),
    };
    Ok(Json(response_json))
}